[{"C:\\Users\\Richard\\Documents\\CSE stuff\\website\\react\\my-app\\src\\index.js":"1","C:\\Users\\Richard\\Documents\\CSE stuff\\website\\react\\my-app\\src\\App.js":"2","C:\\Users\\Richard\\Documents\\CSE stuff\\website\\react\\my-app\\src\\reportWebVitals.js":"3","C:\\Users\\Richard\\Documents\\CSE stuff\\website\\react\\my-app\\src\\LanguageSwitch.js":"4","C:\\Users\\Richard\\Documents\\CSE stuff\\website\\react\\my-app\\src\\WishCalculator.js":"5"},{"size":501,"mtime":1643189131465,"results":"6","hashOfConfig":"7"},{"size":3421,"mtime":1643445168730,"results":"8","hashOfConfig":"7"},{"size":364,"mtime":1643189131513,"results":"9","hashOfConfig":"7"},{"size":847,"mtime":1643426860988,"results":"10","hashOfConfig":"7"},{"size":7251,"mtime":1643440944653,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"11v9lkc",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"26"},"C:\\Users\\Richard\\Documents\\CSE stuff\\website\\react\\my-app\\src\\index.js",[],["27","28"],"C:\\Users\\Richard\\Documents\\CSE stuff\\website\\react\\my-app\\src\\App.js",["29"],"// @flow\n\nimport angery_react from './angery_react.jpg';\nimport './App.css';\nimport { useState } from 'react';\nimport * as React from 'react';\nimport EN from './en.json';\nimport ZH from './zh.json';\nimport JP from './jp.json';\nimport LanguageSwitch from './LanguageSwitch';\nimport { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom';\nimport WishCalculator from './WishCalculator';\nimport { Helmet } from 'react-helmet';\n\n// import ImageMapper from 'react-image-mapper';\n\nexport type Language = 'en' | 'zh' | 'jp';\n\nfunction Main(props: { language: Language, setUseBackground: (val: boolean) => void }): React.Node {\n  const localizeHelper = (key: string) => {\n    switch (props.language) {\n      case 'en':\n        return EN[key];\n      case 'zh':\n        return ZH[key];\n      case 'jp':\n        return JP[key];\n      default:\n        throw new Error('wtf must be tripping');\n    }\n  };\n  // fall back to English if a translation is missing\n  const localize = (key: string) => {\n    return localizeHelper(key) || EN[key];\n  };\n\n  // const MAP = {\n  // name: \"hi\",\n  // areas: [\n  // {\n  // name: 'middle',\n  // shape: 'circle',\n  // coords: [704, 627, 126],\n  // href: 'https://google.com',\n  // },\n  // ],\n  // };\n  // <ImageMapper\n  // src={angery_react}\n\n  // alt=\"angery react\"\n  // map={MAP}\n  // />\n\n  return (\n    <>\n      <div className=\"Homepage\">\n        <Helmet>\n          <title>Richard's site</title>\n        </Helmet>\n        <div className=\"App-horiz-layout\">\n          <img src={angery_react} className=\"App-logo\" alt=\"angery react\" />\n        </div>\n\n        <div className=\"App-horiz-layout\">{localize('intro')}</div>\n        <div className=\"App-horiz-layout\">\n          <a\n            className=\"Profile-link\"\n            href=\"https://www.linkedin.com/in/richardrliang/\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            {localize('linkedin')}\n          </a>\n          <a\n            className=\"Profile-link\"\n            href=\"https://www.facebook.com/richard.liang.583/\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            {localize('facebook')}\n          </a>\n          <a className=\"Profile-link\" href=\"https://twitter.com/angery_rliang\" target=\"_blank\" rel=\"noreferrer\">\n            {localize('twitter')}\n          </a>\n        </div>\n      </div>\n    </>\n  );\n}\n\nfunction App(): React.Node {\n  const [language, setLanguage] = useState('en');\n\n  return (\n    // A <Routes> looks through all its children <Route>\n    // elements and renders the first one whose path\n    // matches the current URL. Use a <Routes> any time\n    // you have multiple routes, but you want only one\n    // of them to render at a time\n\n    <header className=\"App-header\">\n      <div className=\"Main-container\">\n        <Router>\n          <Routes>\n            <Route exact path=\"/\" element={<Main language={language} />} />\n            <Route path=\"/calc\" element={<WishCalculator language={language} />} />\n          </Routes>\n        </Router>\n      </div>\n      <div className=\"App-language-layout\">\n        <LanguageSwitch currLanguage={language} newLanguage=\"en\" setLanguage={setLanguage} />\n        <LanguageSwitch currLanguage={language} newLanguage=\"zh\" setLanguage={setLanguage} />\n        <LanguageSwitch currLanguage={language} newLanguage=\"jp\" setLanguage={setLanguage} />\n      </div>\n    </header>\n  );\n}\n\nexport default App;\n","C:\\Users\\Richard\\Documents\\CSE stuff\\website\\react\\my-app\\src\\reportWebVitals.js",[],"C:\\Users\\Richard\\Documents\\CSE stuff\\website\\react\\my-app\\src\\LanguageSwitch.js",["30","31"],"// @flow\n\nimport * as React from 'react';\nimport type Language from './App';\nimport './App.css';\n\ntype Props = {\n  currLanguage: Language,\n  newLanguage: Language,\n  setLanguage: (language: Language) => void,\n};\n\nconst getLanguageDisplay = (l: Language) => {\n  switch (l) {\n    case 'en':\n      return 'English';\n    case 'zh':\n      return '中文';\n    case 'jp':\n      return '日本語';\n    default:\n      throw new Error('wtf must be tripping');\n  }\n};\n\nfunction LanguageSwitch(props: Props): React.Node {\n  const { currLanguage, newLanguage, setLanguage } = props;\n\n  return currLanguage === newLanguage ? (\n    getLanguageDisplay(newLanguage)\n  ) : (\n    <a className=\"Profile-link\" href=\"javascript:void(0)\" onClick={() => setLanguage(newLanguage)}>\n      {getLanguageDisplay(newLanguage)}\n    </a>\n  );\n}\n\nexport default LanguageSwitch;\n","C:\\Users\\Richard\\Documents\\CSE stuff\\website\\react\\my-app\\src\\WishCalculator.js",["32","33","34","35","36","37","38"],"// @flow\n\nimport './App.css';\nimport { useState, useEffect } from 'react';\nimport * as React from 'react';\nimport { Helmet } from 'react-helmet';\n// import mona from './mona.png';\n\nfunction WishCalculator(props: { language: Language }): React.Node {\n  const [totalWishes, setTotalWishes] = useState<int>(0);\n  const [desiredCopies, setDesiredCopies] = useState<int>(0);\n  const [highestTotalWishes, setHighestTotalWishes] = useState<int>(0);\n  const [highestCopies, setHighestCopies] = useState<int>(0);\n  const [result, setResult] = useState<num>(-1);\n  const [displayResult, setDisplayResult] = useState<React.Node>('\\xa0');\n\n  const [memoizeState, setMemoizeState] = useState<Array<Array<?num>>>([]);\n  const [memoizeGuaranteedState, setMemoizeGuaranteedState] = useState<Array<Array<?num>>>([]);\n  const [singleRates, setSingleRates] = useState<Array<num>>([]);\n\n  const rate = 0.006;\n  const pityIncrease = 0.06;\n  const softPity = 74;\n\n  useEffect(() => {\n    let chance_of_win_at_specific_wish = [];\n    let chance_of_losing_all_prev_wishes = 1;\n    let curr_rate = rate;\n    for (let curr_wish_num = 1; curr_wish_num <= 90; curr_wish_num++) {\n      if (curr_wish_num >= softPity) {\n        curr_rate += pityIncrease;\n        curr_rate = Math.min(curr_rate, 1);\n      }\n      chance_of_win_at_specific_wish.push(chance_of_losing_all_prev_wishes * curr_rate);\n      chance_of_losing_all_prev_wishes *= 1 - curr_rate;\n    }\n    setSingleRates(chance_of_win_at_specific_wish);\n  }, []);\n\n  const getSingleRate = (wishNum: num): num => {\n    return singleRates[wishNum - 1];\n  };\n\n  const handleClick = () => {\n    let memoize = Array(desiredCopies)\n      .fill()\n      .map(() => Array(totalWishes).fill(-1));\n    let memoizeGuaranteed = Array(desiredCopies)\n      .fill()\n      .map(() => Array(totalWishes).fill(-1));\n\n    // console.log(memoize, memoize[0]);\n\n    const setMemoize = (constellation: int, wishNum: int, rate: num): void => {\n      memoize[constellation][wishNum - 1] = rate;\n    };\n    const getMemoize = (constellation: int, wishNum: int): num => {\n      if (constellation < 0) {\n        return 1;\n      }\n      if (wishNum <= 0) {\n        return 0;\n      }\n      return memoize[constellation][wishNum - 1];\n    };\n    const setMemoizeGuaranteed = (constellation: int, wishNum: int, rate: num): void => {\n      memoizeGuaranteed[constellation][wishNum - 1] = rate;\n    };\n    const getMemoizeGuaranteed = (constellation: int, wishNum: int): num => {\n      if (constellation < 0) {\n        return 1;\n      }\n      if (wishNum <= 0) {\n        return 0;\n      }\n      return memoizeGuaranteed[constellation][wishNum - 1];\n    };\n\n    // console.log('starting');\n\n    for (let constellation = 0; constellation < desiredCopies; constellation++) {\n      for (let wishNum = 1; wishNum <= totalWishes; wishNum++) {\n        // console.log('starting', constellation, wishNum);\n        if (wishNum > 90 && getMemoize(constellation - 1, wishNum - 90) >= 1) {\n          setMemoizeGuaranteed(constellation, wishNum, 1);\n        } else {\n          let expectedRate = 0;\n          for (let currWishNum = 1; currWishNum <= Math.min(90, wishNum); currWishNum++) {\n            // console.log('counting', currWishNum, constellation, wishNum);\n            expectedRate += getSingleRate(currWishNum) * getMemoize(constellation - 1, wishNum - currWishNum);\n          }\n          // console.log(expectedRate, constellation, wishNum);\n          setMemoizeGuaranteed(constellation, wishNum, expectedRate);\n        }\n      }\n\n      for (let wishNum = 1; wishNum <= totalWishes; wishNum++) {\n        if (\n          wishNum > 90 &&\n          getMemoize(constellation - 1, wishNum - 90) >= 1 &&\n          getMemoizeGuaranteed(constellation, wishNum - 90) >= 1\n        ) {\n          setMemoize(constellation, wishNum, 1);\n        } else {\n          let expectedRate = 0;\n          for (let currWishNum = 1; currWishNum <= Math.min(90, wishNum); currWishNum++) {\n            expectedRate += getSingleRate(currWishNum) * 0.5 * getMemoize(constellation - 1, wishNum - currWishNum);\n            expectedRate +=\n              getSingleRate(currWishNum) * 0.5 * getMemoizeGuaranteed(constellation, wishNum - currWishNum);\n          }\n          setMemoize(constellation, wishNum, expectedRate);\n        }\n      }\n    }\n    setMemoizeState(memoize);\n    setMemoizeGuaranteedState(memoizeGuaranteed);\n\n    // console.table(memoize);\n    // console.log(desiredCopies, totalWishes);\n    setResult(getMemoize(desiredCopies - 1, totalWishes));\n  };\n\n  const resultNearGuaranteed = result > 0.9999 && result < 1;\n  const oneIn = Math.round((1 / result) * 10) / 10;\n\n  useEffect(() => {\n    if (result >= 0) {\n      let formattedDisplayResult = (\n        <div>\n          You have a{' '}\n          <b>\n            {resultNearGuaranteed ? '>99.99' : parseFloat((result * 100).toPrecision(4))}%\n            {result < 0.5 && result > 0 ? ' (1 in ' + oneIn + ')' : ''}\n          </b>{' '}\n          chance of getting{' '}\n          <b>\n            {desiredCopies} copies in {totalWishes} wishes\n          </b>\n          .\n        </div>\n      );\n      setDisplayResult(formattedDisplayResult);\n    }\n  }, [result]);\n\n  return (\n    <>\n      <header className=\"Calc-page\">\n        <Helmet>\n          <title>Genshin character event wish confidence intervals</title>\n        </Helmet>\n        <div className=\"Calc-horiz-layout-left\">\n          <div>Genshin character event wish confidence intervals</div>\n          <div className=\"App-horiz-layout-unspaced\">\n            {'Number of wishes you have: '}{' '}\n            <input\n              type=\"number\"\n              className=\"Text-input\"\n              value={totalWishes}\n              onChange={(event) => setTotalWishes(Math.max(0, Math.min(2000, Math.trunc(event.target.value))))}\n            />\n          </div>\n          <div className=\"App-horiz-layout-unspaced\">\n            {'Number of copies you want: '}{' '}\n            <input\n              type=\"number\"\n              className=\"Text-input\"\n              value={desiredCopies}\n              onChange={(event) => setDesiredCopies(Math.max(1, Math.min(7, Math.trunc(event.target.value))))}\n            />\n          </div>\n          <div className=\"App-horiz-layout-disabled\">\n            <label>Wish base success rate: </label>\n            <input type=\"number\" className=\"Text-input-disabled\" value={0.006} disabled />\n          </div>\n          <div className=\"App-horiz-layout-disabled\">\n            <label>Soft pity: </label>\n            <input type=\"number\" className=\"Text-input-disabled\" value={74} disabled />\n          </div>\n          <div className=\"App-horiz-layout-disabled\">\n            <label>Success rate increase per wish beginning at soft pity:</label>\n            <input type=\"number\" className=\"Text-input-disabled\" value={0.06} disabled />\n          </div>\n          <div className=\"App-horiz-layout-unspaced\">\n            <button class=\"Submit-button\" onClick={handleClick}>\n              Calculate\n            </button>\n          </div>\n          <div className=\"App-horiz-layout-unspaced\">{displayResult}</div>\n        </div>\n        <div className=\"Calc-horiz-layout-right\"></div>\n      </header>\n    </>\n  );\n}\n\nexport default WishCalculator;\n",["39","40"],{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":11,"column":50,"nodeType":"47","messageId":"48","endLine":11,"endColumn":54},{"ruleId":"49","severity":1,"message":"50","line":32,"column":5,"nodeType":"51","endLine":32,"endColumn":100},{"ruleId":"52","severity":1,"message":"53","line":32,"column":38,"nodeType":"54","messageId":"55","endLine":32,"endColumn":58},{"ruleId":"45","severity":1,"message":"56","line":12,"column":10,"nodeType":"47","messageId":"48","endLine":12,"endColumn":28},{"ruleId":"45","severity":1,"message":"57","line":12,"column":30,"nodeType":"47","messageId":"48","endLine":12,"endColumn":51},{"ruleId":"45","severity":1,"message":"58","line":13,"column":10,"nodeType":"47","messageId":"48","endLine":13,"endColumn":23},{"ruleId":"45","severity":1,"message":"59","line":13,"column":25,"nodeType":"47","messageId":"48","endLine":13,"endColumn":41},{"ruleId":"45","severity":1,"message":"60","line":17,"column":10,"nodeType":"47","messageId":"48","endLine":17,"endColumn":22},{"ruleId":"45","severity":1,"message":"61","line":18,"column":10,"nodeType":"47","messageId":"48","endLine":18,"endColumn":32},{"ruleId":"62","severity":1,"message":"63","line":144,"column":6,"nodeType":"64","endLine":144,"endColumn":14,"suggestions":"65"},{"ruleId":"41","replacedBy":"66"},{"ruleId":"43","replacedBy":"67"},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-script-url","Script URL is a form of eval.","Literal","unexpectedScriptURL","'highestTotalWishes' is assigned a value but never used.","'setHighestTotalWishes' is assigned a value but never used.","'highestCopies' is assigned a value but never used.","'setHighestCopies' is assigned a value but never used.","'memoizeState' is assigned a value but never used.","'memoizeGuaranteedState' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'desiredCopies', 'oneIn', 'resultNearGuaranteed', and 'totalWishes'. Either include them or remove the dependency array.","ArrayExpression",["70"],["68"],["69"],"no-global-assign","no-unsafe-negation",{"desc":"71","fix":"72"},"Update the dependencies array to be: [desiredCopies, oneIn, result, resultNearGuaranteed, totalWishes]",{"range":"73","text":"74"},[5177,5185],"[desiredCopies, oneIn, result, resultNearGuaranteed, totalWishes]"]