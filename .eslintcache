[{"C:\\Users\\Richard\\Documents\\CSE stuff\\website\\react\\my-app\\src\\index.js":"1","C:\\Users\\Richard\\Documents\\CSE stuff\\website\\react\\my-app\\src\\App.js":"2","C:\\Users\\Richard\\Documents\\CSE stuff\\website\\react\\my-app\\src\\reportWebVitals.js":"3","C:\\Users\\Richard\\Documents\\CSE stuff\\website\\react\\my-app\\src\\LanguageSwitch.js":"4","C:\\Users\\Richard\\Documents\\CSE stuff\\website\\react\\my-app\\src\\WishCalculator.js":"5"},{"size":518,"mtime":1643446320483,"results":"6","hashOfConfig":"7"},{"size":3557,"mtime":1643448085249,"results":"8","hashOfConfig":"7"},{"size":377,"mtime":1643446320499,"results":"9","hashOfConfig":"7"},{"size":901,"mtime":1643447910619,"results":"10","hashOfConfig":"7"},{"size":7494,"mtime":1643448499061,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"11v9lkc",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"14"},"C:\\Users\\Richard\\Documents\\CSE stuff\\website\\react\\my-app\\src\\index.js",[],["26","27"],"C:\\Users\\Richard\\Documents\\CSE stuff\\website\\react\\my-app\\src\\App.js",["28"],"// @flow\r\n\r\nimport angery_react from './angery_react.jpg';\r\nimport './App.css';\r\nimport EN from './en.json';\r\nimport ZH from './zh.json';\r\nimport JP from './jp.json';\r\nimport LanguageSwitch from './LanguageSwitch';\r\n\r\nimport { useState } from 'react';\r\nimport * as React from 'react';\r\nimport { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom';\r\nimport WishCalculator from './WishCalculator';\r\nimport { Helmet } from 'react-helmet';\r\n\r\n// import ImageMapper from 'react-image-mapper';\r\n\r\nexport type Language = 'en' | 'zh' | 'jp';\r\n\r\nfunction Main(props: { localize: (key: string) => string}): React.Node {\r\n\r\n  const localize = props.localize;\r\n\r\n  // const MAP = {\r\n  // name: \"hi\",\r\n  // areas: [\r\n  // {\r\n  // name: 'middle',\r\n  // shape: 'circle',\r\n  // coords: [704, 627, 126],\r\n  // href: 'https://google.com',\r\n  // },\r\n  // ],\r\n  // };\r\n  // <ImageMapper\r\n  // src={angery_react}\r\n\r\n  // alt=\"angery react\"\r\n  // map={MAP}\r\n  // />\r\n\r\n  return (\r\n    <>\r\n      <div className=\"Homepage\">\r\n        <Helmet>\r\n          <title>Richard's site</title>\r\n        </Helmet>\r\n        <div className=\"App-horiz-layout\">\r\n          <img src={angery_react} className=\"App-logo\" alt=\"angery react\" />\r\n        </div>\r\n\r\n        <div className=\"App-horiz-layout\">{localize('intro')}</div>\r\n        <div className=\"App-horiz-layout\">\r\n          <a\r\n            className=\"Profile-link\"\r\n            href=\"https://www.linkedin.com/in/richardrliang/\"\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n          >\r\n            {localize('linkedin')}\r\n          </a>\r\n          <a\r\n            className=\"Profile-link\"\r\n            href=\"https://www.facebook.com/richard.liang.583/\"\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n          >\r\n            {localize('facebook')}\r\n          </a>\r\n          <a className=\"Profile-link\" href=\"https://twitter.com/angery_rliang\" target=\"_blank\" rel=\"noreferrer\">\r\n            {localize('twitter')}\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction App(): React.Node {\r\n  const [language, setLanguage] = useState('en');\r\n  \r\n  const localizeHelper = (key: string) => {\r\n    switch (language) {\r\n      case 'en':\r\n        return EN[key];\r\n      case 'zh':\r\n        return ZH[key];\r\n      case 'jp':\r\n        return JP[key];\r\n      default:\r\n        throw new Error('wtf must be tripping');\r\n    }\r\n  };\r\n  \r\n    // fall back to English if a translation is missing\r\n  const localize = (key: string) => {\r\n    return localizeHelper(key) || EN[key];\r\n  };\r\n\r\n  return (\r\n    // A <Routes> looks through all its children <Route>\r\n    // elements and renders the first one whose path\r\n    // matches the current URL. Use a <Routes> any time\r\n    // you have multiple routes, but you want only one\r\n    // of them to render at a time\r\n\r\n    <header className=\"App-header\">\r\n      <div className=\"Main-container\">\r\n        <Router>\r\n          <Routes>\r\n            <Route exact path=\"/\" element={<Main localize={localize} />} />\r\n            <Route path=\"/calc\" element={<WishCalculator localize={localize} />} />\r\n          </Routes>\r\n        </Router>\r\n      </div>\r\n      <div className=\"App-language-layout\">\r\n        <LanguageSwitch currLanguage={language} newLanguage=\"en\" setLanguage={setLanguage} />\r\n        <LanguageSwitch currLanguage={language} newLanguage=\"zh\" setLanguage={setLanguage} />\r\n        <LanguageSwitch currLanguage={language} newLanguage=\"jp\" setLanguage={setLanguage} />\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Richard\\Documents\\CSE stuff\\website\\react\\my-app\\src\\reportWebVitals.js",[],"C:\\Users\\Richard\\Documents\\CSE stuff\\website\\react\\my-app\\src\\LanguageSwitch.js",["29","30","31"],"// @flow\r\n\r\nimport * as React from 'react';\r\nimport type Language from './App';\r\nimport './App.css';\r\n\r\ntype LanguageSwitchProps = {\r\n  currLanguage: Language,\r\n  newLanguage: Language,\r\n  setLanguage: (language: Language) => void,\r\n};\r\n\r\nconst getLanguageDisplay = (l: Language) => {\r\n  switch (l) {\r\n    case 'en':\r\n      return 'English';\r\n    case 'zh':\r\n      return '中文';\r\n    case 'jp':\r\n      return '日本語';\r\n    default:\r\n      throw new Error('wtf must be tripping');\r\n  }\r\n};\r\n\r\nfunction LanguageSwitch(props: Props): React.Node {\r\n  const { currLanguage, newLanguage, setLanguage } = props;\r\n  \r\n  return currLanguage === newLanguage ? (\r\n    getLanguageDisplay(newLanguage)\r\n  ) : (\r\n    <a className=\"Profile-link\" href=\"javascript:void(0)\" onClick={() => setLanguage(newLanguage)}>\r\n      {getLanguageDisplay(newLanguage)}\r\n    </a>\r\n  );\r\n}\r\n\r\nexport default LanguageSwitch;\r\n","C:\\Users\\Richard\\Documents\\CSE stuff\\website\\react\\my-app\\src\\WishCalculator.js",["32","33","34","35","36","37","38"],"// @flow\r\n\r\nimport './App.css';\r\nimport { useState, useEffect } from 'react';\r\nimport * as React from 'react';\r\nimport { Helmet } from 'react-helmet';\r\n// import mona from './mona.png';\r\n\r\nfunction WishCalculator(props: {localize: (key: string) => string}): React.Node {\r\n  const [totalWishes, setTotalWishes] = useState<int>(0);\r\n  const [desiredCopies, setDesiredCopies] = useState<int>(0);\r\n  const [highestTotalWishes, setHighestTotalWishes] = useState<int>(0);\r\n  const [highestCopies, setHighestCopies] = useState<int>(0);\r\n  const [result, setResult] = useState<num>(-1);\r\n  const [displayResult, setDisplayResult] = useState<React.Node>('\\xa0');\r\n  const localize = props.localize;\r\n\r\n  const [memoizeState, setMemoizeState] = useState<Array<Array<?num>>>([]);\r\n  const [memoizeGuaranteedState, setMemoizeGuaranteedState] = useState<Array<Array<?num>>>([]);\r\n  const [singleRates, setSingleRates] = useState<Array<num>>([]);\r\n\r\n  const rate = 0.006;\r\n  const pityIncrease = 0.06;\r\n  const softPity = 74;\r\n\r\n  useEffect(() => {\r\n    let chance_of_win_at_specific_wish = [];\r\n    let chance_of_losing_all_prev_wishes = 1;\r\n    let curr_rate = rate;\r\n    for (let curr_wish_num = 1; curr_wish_num <= 90; curr_wish_num++) {\r\n      if (curr_wish_num >= softPity) {\r\n        curr_rate += pityIncrease;\r\n        curr_rate = Math.min(curr_rate, 1);\r\n      }\r\n      chance_of_win_at_specific_wish.push(chance_of_losing_all_prev_wishes * curr_rate);\r\n      chance_of_losing_all_prev_wishes *= 1 - curr_rate;\r\n    }\r\n    setSingleRates(chance_of_win_at_specific_wish);\r\n  }, []);\r\n\r\n  const getSingleRate = (wishNum: num): num => {\r\n    return singleRates[wishNum - 1];\r\n  };\r\n\r\n  const handleClick = () => {\r\n    let memoize = Array(desiredCopies)\r\n      .fill()\r\n      .map(() => Array(totalWishes).fill(-1));\r\n    let memoizeGuaranteed = Array(desiredCopies)\r\n      .fill()\r\n      .map(() => Array(totalWishes).fill(-1));\r\n\r\n    // console.log(memoize, memoize[0]);\r\n\r\n    const setMemoize = (constellation: int, wishNum: int, rate: num): void => {\r\n      memoize[constellation][wishNum - 1] = rate;\r\n    };\r\n    const getMemoize = (constellation: int, wishNum: int): num => {\r\n      if (constellation < 0) {\r\n        return 1;\r\n      }\r\n      if (wishNum <= 0) {\r\n        return 0;\r\n      }\r\n      return memoize[constellation][wishNum - 1];\r\n    };\r\n    const setMemoizeGuaranteed = (constellation: int, wishNum: int, rate: num): void => {\r\n      memoizeGuaranteed[constellation][wishNum - 1] = rate;\r\n    };\r\n    const getMemoizeGuaranteed = (constellation: int, wishNum: int): num => {\r\n      if (constellation < 0) {\r\n        return 1;\r\n      }\r\n      if (wishNum <= 0) {\r\n        return 0;\r\n      }\r\n      return memoizeGuaranteed[constellation][wishNum - 1];\r\n    };\r\n\r\n    // console.log('starting');\r\n\r\n    for (let constellation = 0; constellation < desiredCopies; constellation++) {\r\n      for (let wishNum = 1; wishNum <= totalWishes; wishNum++) {\r\n        // console.log('starting', constellation, wishNum);\r\n        if (wishNum > 90 && getMemoize(constellation - 1, wishNum - 90) >= 1) {\r\n          setMemoizeGuaranteed(constellation, wishNum, 1);\r\n        } else {\r\n          let expectedRate = 0;\r\n          for (let currWishNum = 1; currWishNum <= Math.min(90, wishNum); currWishNum++) {\r\n            // console.log('counting', currWishNum, constellation, wishNum);\r\n            expectedRate += getSingleRate(currWishNum) * getMemoize(constellation - 1, wishNum - currWishNum);\r\n          }\r\n          // console.log(expectedRate, constellation, wishNum);\r\n          setMemoizeGuaranteed(constellation, wishNum, expectedRate);\r\n        }\r\n      }\r\n\r\n      for (let wishNum = 1; wishNum <= totalWishes; wishNum++) {\r\n        if (\r\n          wishNum > 90 &&\r\n          getMemoize(constellation - 1, wishNum - 90) >= 1 &&\r\n          getMemoizeGuaranteed(constellation, wishNum - 90) >= 1\r\n        ) {\r\n          setMemoize(constellation, wishNum, 1);\r\n        } else {\r\n          let expectedRate = 0;\r\n          for (let currWishNum = 1; currWishNum <= Math.min(90, wishNum); currWishNum++) {\r\n            expectedRate += getSingleRate(currWishNum) * 0.5 * getMemoize(constellation - 1, wishNum - currWishNum);\r\n            expectedRate +=\r\n              getSingleRate(currWishNum) * 0.5 * getMemoizeGuaranteed(constellation, wishNum - currWishNum);\r\n          }\r\n          setMemoize(constellation, wishNum, expectedRate);\r\n        }\r\n      }\r\n    }\r\n    setMemoizeState(memoize);\r\n    setMemoizeGuaranteedState(memoizeGuaranteed);\r\n\r\n    // console.table(memoize);\r\n    // console.log(desiredCopies, totalWishes);\r\n    setResult(getMemoize(desiredCopies - 1, totalWishes));\r\n  };\r\n\r\n  const resultNearGuaranteed = result > 0.9999 && result < 1;\r\n  const oneIn = Math.round((1 / result) * 10) / 10;\r\n\r\n  useEffect(() => {\r\n    if (result >= 0) {\r\n      let formattedDisplayResult = (\r\n        <div>\r\n          You have a{' '}\r\n          <b>\r\n            {resultNearGuaranteed ? '>99.99' : parseFloat((result * 100).toPrecision(4))}%\r\n            {result < 0.5 && result > 0 ? ' (1 in ' + oneIn + ')' : ''}\r\n          </b>{' '}\r\n          chance of getting{' '}\r\n          <b>\r\n            {desiredCopies} copies in {totalWishes} wishes\r\n          </b>\r\n          .\r\n        </div>\r\n      );\r\n      setDisplayResult(formattedDisplayResult);\r\n    }\r\n  }, [result]);\r\n\r\n  return (\r\n    <>\r\n      <header className=\"Calc-page\">\r\n        <Helmet>\r\n          <title>Genshin character event wish confidence intervals</title>\r\n        </Helmet>\r\n        <div className=\"Calc-horiz-layout-left\">\r\n          <div>Genshin character event wish confidence intervals</div>\r\n          <div className=\"App-horiz-layout-unspaced\">\r\n            {localize('numberofwishes')}{' '}\r\n            <input\r\n              type=\"number\"\r\n              className=\"Text-input\"\r\n              value={totalWishes}\r\n              onChange={(event) => setTotalWishes(Math.max(0, Math.min(2000, Math.trunc(event.target.value))))}\r\n            />\r\n          </div>\r\n          <div className=\"App-horiz-layout-unspaced\">\r\n            {'Number of copies you want: '}{' '}\r\n            <input\r\n              type=\"number\"\r\n              className=\"Text-input\"\r\n              value={desiredCopies}\r\n              onChange={(event) => setDesiredCopies(Math.max(1, Math.min(7, Math.trunc(event.target.value))))}\r\n            />\r\n          </div>\r\n          <div className=\"App-horiz-layout-disabled\">\r\n            <label>Wish base success rate: </label>\r\n            <input type=\"number\" className=\"Text-input-disabled\" value={0.006} disabled />\r\n          </div>\r\n          <div className=\"App-horiz-layout-disabled\">\r\n            <label>Soft pity: </label>\r\n            <input type=\"number\" className=\"Text-input-disabled\" value={74} disabled />\r\n          </div>\r\n          <div className=\"App-horiz-layout-disabled\">\r\n            <label>Success rate increase per wish beginning at soft pity:</label>\r\n            <input type=\"number\" className=\"Text-input-disabled\" value={0.06} disabled />\r\n          </div>\r\n          <div className=\"App-horiz-layout-unspaced\">\r\n            <button class=\"Submit-button\" onClick={handleClick}>\r\n              Calculate\r\n            </button>\r\n          </div>\r\n          <div className=\"App-horiz-layout-unspaced\">{displayResult}</div>\r\n        </div>\r\n        <div className=\"Calc-horiz-layout-right\"></div>\r\n      </header>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default WishCalculator;\r\n",{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":12,"column":50,"nodeType":"45","messageId":"46","endLine":12,"endColumn":54},{"ruleId":"43","severity":1,"message":"47","line":7,"column":6,"nodeType":"45","messageId":"46","endLine":7,"endColumn":25},{"ruleId":"48","severity":1,"message":"49","line":32,"column":5,"nodeType":"50","endLine":32,"endColumn":100},{"ruleId":"51","severity":1,"message":"52","line":32,"column":38,"nodeType":"53","messageId":"54","endLine":32,"endColumn":58},{"ruleId":"43","severity":1,"message":"55","line":12,"column":10,"nodeType":"45","messageId":"46","endLine":12,"endColumn":28},{"ruleId":"43","severity":1,"message":"56","line":12,"column":30,"nodeType":"45","messageId":"46","endLine":12,"endColumn":51},{"ruleId":"43","severity":1,"message":"57","line":13,"column":10,"nodeType":"45","messageId":"46","endLine":13,"endColumn":23},{"ruleId":"43","severity":1,"message":"58","line":13,"column":25,"nodeType":"45","messageId":"46","endLine":13,"endColumn":41},{"ruleId":"43","severity":1,"message":"59","line":18,"column":10,"nodeType":"45","messageId":"46","endLine":18,"endColumn":22},{"ruleId":"43","severity":1,"message":"60","line":19,"column":10,"nodeType":"45","messageId":"46","endLine":19,"endColumn":32},{"ruleId":"61","severity":1,"message":"62","line":145,"column":6,"nodeType":"63","endLine":145,"endColumn":14,"suggestions":"64"},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'LanguageSwitchProps' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-script-url","Script URL is a form of eval.","Literal","unexpectedScriptURL","'highestTotalWishes' is assigned a value but never used.","'setHighestTotalWishes' is assigned a value but never used.","'highestCopies' is assigned a value but never used.","'setHighestCopies' is assigned a value but never used.","'memoizeState' is assigned a value but never used.","'memoizeGuaranteedState' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'desiredCopies', 'oneIn', 'resultNearGuaranteed', and 'totalWishes'. Either include them or remove the dependency array.","ArrayExpression",["67"],"no-global-assign","no-unsafe-negation",{"desc":"68","fix":"69"},"Update the dependencies array to be: [desiredCopies, oneIn, result, resultNearGuaranteed, totalWishes]",{"range":"70","text":"71"},[5369,5377],"[desiredCopies, oneIn, result, resultNearGuaranteed, totalWishes]"]